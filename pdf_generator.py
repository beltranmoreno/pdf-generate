#!/usr/bin/env python3
"""
PDF Generator - A simple tool to generate PDF documents
"""

import argparse
from datetime import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import os


def create_sample_pdf(filename="sample.pdf", title="Sample PDF Document"):
    """Create a sample PDF document with basic content"""
    
    # Create the PDF document
    doc = SimpleDocTemplate(filename, pagesize=letter)
    
    # Get styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=1,  # Center alignment
        textColor=colors.darkblue
    )
    
    # Build the content
    story = []
    
    # Add title
    story.append(Paragraph(title, title_style))
    story.append(Spacer(1, 20))
    
    # Add content
    content = """
    <para align="center">
    <b>Welcome to PDF Generator!</b><br/><br/>
    This is a sample PDF document generated using Python and ReportLab.<br/><br/>
    Features include:
    </para>
    
    <para>
    • Custom styling and formatting<br/>
    • Multiple paragraph support<br/>
    • Professional document layout<br/>
    • Easy to customize and extend<br/><br/>
    </para>
    
    <para>
    Generated on: {date}<br/>
    File: {filename}
    </para>
    """.format(
        date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        filename=filename
    )
    
    story.append(Paragraph(content, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Add a footer note
    footer = """
    <para align="center" fontSize="10" textColor="gray">
    This document was generated by PDF Generator v1.0
    </para>
    """
    story.append(Paragraph(footer, styles['Normal']))
    
    # Build the PDF
    doc.build(story)
    print(f"✅ PDF created successfully: {filename}")


def create_custom_pdf(filename, content_text, title="Custom PDF"):
    """Create a PDF with custom content"""
    
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()
    
    story = []
    
    # Add title
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        spaceAfter=20,
        textColor=colors.darkgreen
    )
    story.append(Paragraph(title, title_style))
    story.append(Spacer(1, 12))
    
    # Add custom content
    story.append(Paragraph(content_text, styles['Normal']))
    
    doc.build(story)
    print(f"✅ Custom PDF created successfully: {filename}")


def main():
    parser = argparse.ArgumentParser(description="Generate PDF documents")
    parser.add_argument("--filename", "-f", default="output.pdf", 
                       help="Output filename (default: output.pdf)")
    parser.add_argument("--title", "-t", default="Generated PDF Document",
                       help="Document title (default: Generated PDF Document)")
    parser.add_argument("--content", "-c", 
                       help="Custom content for the PDF")
    parser.add_argument("--sample", "-s", action="store_true",
                       help="Generate a sample PDF with demo content")
    
    args = parser.parse_args()
    
    try:
        if args.sample:
            create_sample_pdf(args.filename, args.title)
        elif args.content:
            create_custom_pdf(args.filename, args.content, args.title)
        else:
            # Default: create a simple PDF
            create_sample_pdf(args.filename, args.title)
            
    except Exception as e:
        print(f"❌ Error creating PDF: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
